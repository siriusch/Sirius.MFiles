<#@ template hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Windows.Forms" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.Design" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Resources" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
<#
    var model = LoadResources();
    var namespaceHint = (string)System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint");
#>
// <auto-generated />

using System;
using System.Reflection;
using System.Resources;
using System.Text.RegularExpressions;

#nullable enable

namespace <#= namespaceHint #> {
    /// <summary>
    /// String resources
    /// </summary>
    <#= model.AccessModifier #> static class <#= model.Class #> {
        private static readonly Regex _arg
            = new Regex(@"<#= Resource.RxArg.ToString().Replace("\"", "\"\"") #>", RegexOptions.CultureInvariant|RegexOptions.Singleline|RegexOptions.Compiled|RegexOptions.ExplicitCapture);
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("<#= model.ResourceName #>", typeof(<#= model.Class #>).Assembly);
<#
    foreach (var resource in model.Resources) {
#>

        /// <summary>
<#
        foreach (var line in Regex.Split(resource.Value, @"\r|\n|\r\n")) {
#>
        ///     <#= line.Replace("<", "&lt;").Replace(">", "&gt;").Replace("&", "&apos;") #>
<#
        }
#>
        /// </summary>
<#
        if (resource.Obsolete) {
#>
        [Obsolete]
<#
        }

        if (resource.Parameters.Any()) {
#>
        public static string <#= resource.Name #>(<#= string.Join(", ", resource.Parameters.Select(e => $"{e.Type} {e.Name}")) #>)
            => string.Format(
                GetString("<#= resource.Name #>", m => m.Value switch { 
<#= string.Join(Environment.NewLine, resource.Parameters.Select(e => FormattableString.Invariant($"                    \"{e.Name}\" => \"{e.Index}\","))) #>
                    _ => m.Value
                }),
                <#= string.Join(", ", resource.Parameters.Select(e => e.Name)) #>);
<#
        } else {
#>
        public static string <#= resource.Name #>
            => GetString("<#= resource.Name #>");
<#
        }
    }
#>

        private static string GetString(string name)
        {
            return _resourceManager.GetString(name)!;
        }

        private static string GetString(string name, MatchEvaluator replacer)
        {
            return _arg.Replace(GetString(name), replacer);
        }
    }
}

<#+
    ResourceFile LoadResources()
    {
        var result = new ResourceFile();

        if (Session.ContainsKey("AccessModifier"))
        {
            result.AccessModifier = (string)Session["AccessModifier"];
        };

        var resourceFile = (string)Session["ResourceFile"];
        if (!Path.IsPathRooted(resourceFile))
        {
            resourceFile = Host.ResolvePath(resourceFile);
        }

        var resourceNamespace = (string)Session["ResourceNamespace"];

        result.Class = Path.GetFileNameWithoutExtension(resourceFile);

        result.ResourceName = resourceNamespace + "." + result.Class;

        List<ResXDataNode> sortedResources;
        using (var reader = new ResXResourceReader(resourceFile))
        {
            reader.UseResXDataNodes = true;
            sortedResources = (from DictionaryEntry r in reader
                               orderby r.Key
                               select (ResXDataNode)r.Value).ToList();

            result.Resources = sortedResources
                .Select(r => new Resource(r))
                .ToList();
        }

        using (var writer = new ResXResourceWriter(resourceFile))
        {
            foreach (var node in sortedResources)
                writer.AddResource(node);

            writer.Generate();
        }

        return result;
    }

    class ResourceFile {
        public string AccessModifier { get; set; } = "public";
        public string Class { get; set; }
        public string ResourceName { get; set; }
        public IEnumerable<Resource> Resources { get; set; }
    }

    class Resource {
        internal static readonly Regex RxArg = new Regex(@"(?<=(^|[^\{])(\{\{)*\{)[\w_][^,:\}]*", RegexOptions.CultureInvariant|RegexOptions.Singleline|RegexOptions.Compiled|RegexOptions.ExplicitCapture);

        public Resource(ResXDataNode node) {
            Name = node.Name;
            Value = (string)node.GetValue((ITypeResolutionService)null);
            var types = Regex.Split(node.Comment, @"\s+").Where(t => !string.IsNullOrEmpty(t)).ToList();
            if (types.FirstOrDefault() == "Obsolete") {
                Obsolete = true;
                types.RemoveAt(0);
            }

            Parameters = RxArg.Matches(Value)
                .Cast<Match>()
                .Select(m => m.Value)
                .Distinct()
                .Select((n, i) => (i < types.Count ? types[i] : "object?", n, i))
                .ToList();
        }

        public string Name { get; }
        public string Value { get; }
        public bool Obsolete { get; }
        public IEnumerable<(string Type, string Name, int Index)> Parameters { get; }
    }
#>