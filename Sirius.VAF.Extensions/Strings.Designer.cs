// <auto-generated />

using System;
using System.Reflection;
using System.Resources;
using System.Text.RegularExpressions;

#nullable enable

namespace Sirius.VAF {
    /// <summary>
    /// String resources
    /// </summary>
    public static class Strings {
        private static readonly Regex _arg
            = new Regex(@"(?<=(^|[^\{])(\{\{)*\{)[\w_][^,:\}]*", RegexOptions.CultureInvariant|RegexOptions.Singleline|RegexOptions.Compiled|RegexOptions.ExplicitCapture);
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Sirius.VAF.Strings", typeof(Strings).Assembly);

        /// <summary>
        ///     The IBAN has an invalid checksum.
        /// </summary>
        public static string IbanInvalidChecksum
            => GetString("IbanInvalidChecksum");

        /// <summary>
        ///     The IBAN has an invalid format.
        /// </summary>
        public static string IbanInvalidFormat
            => GetString("IbanInvalidFormat");

        /// <summary>
        ///     Invalid data.
        /// </summary>
        public static string InvalidData
            => GetString("InvalidData");

        /// <summary>
        ///     A QR-IBAN requires a QR invoice reference.
        /// </summary>
        public static string InvoiceReferenceQrIbanRequiresQrr
            => GetString("InvoiceReferenceQrIbanRequiresQrr");

        /// <summary>
        ///     The QR invoice reference has an invalid checksum.
        /// </summary>
        public static string InvoiceReferenceQrrInvalidChecksum
            => GetString("InvoiceReferenceQrrInvalidChecksum");

        /// <summary>
        ///     The QR invoice reference has an invalid format.
        /// </summary>
        public static string InvoiceReferenceQrrInvalidFormat
            => GetString("InvoiceReferenceQrrInvalidFormat");

        /// <summary>
        ///     A QR invoice reference requires a QR-IBAN.
        /// </summary>
        public static string InvoiceReferenceQrrRequiresQrIban
            => GetString("InvoiceReferenceQrrRequiresQrIban");

        /// <summary>
        ///     The structured invoice reference has an invalid checksum.
        /// </summary>
        public static string InvoiceReferenceScorInvalidChecksum
            => GetString("InvoiceReferenceScorInvalidChecksum");

        /// <summary>
        ///     The structured invoice reference has an invalid format.
        /// </summary>
        public static string InvoiceReferenceScorInvalidFormat
            => GetString("InvoiceReferenceScorInvalidFormat");

        /// <summary>
        ///     The OASI number has an invalid checksum.
        /// </summary>
        public static string OasiInvalidChecksum
            => GetString("OasiInvalidChecksum");

        /// <summary>
        ///     The OASI number has an invalid format.
        /// </summary>
        public static string OasiInvalidFormat
            => GetString("OasiInvalidFormat");

        /// <summary>
        ///     The number has an invalid country code.
        /// </summary>
        public static string PhoneInvalidCountryCode
            => GetString("PhoneInvalidCountryCode");

        /// <summary>
        ///     The number is invalid ({message}).
        /// </summary>
        public static string PhoneInvalidFormat(string message)
            => string.Format(
                GetString("PhoneInvalidFormat", m => m.Value switch { 
                    "message" => "0",
                    _ => m.Value
                }),
                message);

        /// <summary>
        ///     The number has an invalid length.
        /// </summary>
        public static string PhoneInvalidLength
            => GetString("PhoneInvalidLength");

        /// <summary>
        ///     The number is not a valid number.
        /// </summary>
        public static string PhoneInvalidNumber
            => GetString("PhoneInvalidNumber");

        /// <summary>
        ///     The number has no area code.
        /// </summary>
        public static string PhoneLocalNumber
            => GetString("PhoneLocalNumber");

        /// <summary>
        ///     The number is too long.
        /// </summary>
        public static string PhoneTooLong
            => GetString("PhoneTooLong");

        /// <summary>
        ///     The number is too short.
        /// </summary>
        public static string PhoneTooShort
            => GetString("PhoneTooShort");

        /// <summary>
        ///     The postal code is invalid for country {countryCode}.
        /// </summary>
        public static string PostalCodeInvalid(string countryCode)
            => string.Format(
                GetString("PostalCodeInvalid", m => m.Value switch { 
                    "countryCode" => "0",
                    _ => m.Value
                }),
                countryCode);

        /// <summary>
        ///     The UID has an invalid checksum.
        /// </summary>
        public static string UidInvalidChecksum
            => GetString("UidInvalidChecksum");

        /// <summary>
        ///     The UID has an invalid format.
        /// </summary>
        public static string UidInvalidFormat
            => GetString("UidInvalidFormat");

        /// <summary>
        ///     No value '{value}' found in Value List {valueList}.
        /// </summary>
        public static string ValueListValueNotFound(string value, string valueList)
            => string.Format(
                GetString("ValueListValueNotFound", m => m.Value switch { 
                    "value" => "0",
                    "valueList" => "1",
                    _ => m.Value
                }),
                value, valueList);

        private static string GetString(string name)
        {
            return _resourceManager.GetString(name)!;
        }

        private static string GetString(string name, MatchEvaluator replacer)
        {
            return _arg.Replace(GetString(name), replacer);
        }
    }
}

